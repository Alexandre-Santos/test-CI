name: CI · Build + Trivy + Badges + Pages

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  security-events: write   # to upload SARIF (optional but nice)
  pages: write             # to deploy GitHub Pages
  id-token: write          # required by deploy-pages

# .github/workflows/ci-trivy.yml
jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ toLower(github.repository) }}  # <-- lowercase
      IMAGE_TAG: ci-${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image (no push)
        run: docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
        
      # --- Trivy: image vulnerabilities (does not fail the job) ---
      - name: Trivy scan (image → JSON + SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'json'
          output: 'artifacts/trivy-image.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'

      - name: Trivy scan (image → SARIF upload)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: image
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'artifacts/trivy-image.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'

      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: artifacts/trivy-image.sarif

      # --- Trivy: repo/filesystem scan (configs, IaC, deps) ---
      - name: Trivy scan (fs → JSON)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          scan-ref: .
          format: 'json'
          output: 'artifacts/trivy-fs.json'
          ignore-unfixed: true
          security-checks: 'vuln,config,secret'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'

      # --- Create Shields-compatible JSON badges ---
      - name: Create badges
        run: |
          set -euo pipefail
          mkdir -p public/badges

          # jq helpers to count unique vulns by severity for Trivy JSON
          count() { jq -r "$1" "$2" 2>/dev/null || echo 0; }

          IMG_CRIT=$(count '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL") | .VulnerabilityID] | unique | length' artifacts/trivy-image.json)
          IMG_HIGH=$(count '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")     | .VulnerabilityID] | unique | length' artifacts/trivy-image.json)
          IMG_MED=$(count '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")   | .VulnerabilityID] | unique | length' artifacts/trivy-image.json)
          IMG_LOW=$(count  '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")     | .VulnerabilityID] | unique | length' artifacts/trivy-image.json)

          FS_CRIT=$(count  '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL") | .VulnerabilityID] | unique | length' artifacts/trivy-fs.json)
          FS_HIGH=$(count  '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")     | .VulnerabilityID] | unique | length' artifacts/trivy-fs.json)
          FS_MED=$(count   '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")   | .VulnerabilityID] | unique | length' artifacts/trivy-fs.json)
          FS_LOW=$(count   '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")      | .VulnerabilityID] | unique | length' artifacts/trivy-fs.json)

          # Simple color ramp based on highest severity present
          color_for() {
            local crit=$1 high=$2 med=$3 low=$4
            if   [ "$crit" -gt 0 ]; then echo "red"
            elif [ "$high" -gt 0 ]; then echo "orange"
            elif [ "$med"  -gt 0 ]; then echo "yellow"
            elif [ "$low"  -gt 0 ]; then echo "yellowgreen"
            else echo "brightgreen"
            fi
          }

          CI_COLOR=$(color_for "$IMG_CRIT" "$IMG_HIGH" "$IMG_MED" "$IMG_LOW")
          FS_COLOR=$(color_for "$FS_CRIT" "$FS_HIGH" "$FS_MED" "$FS_LOW")

          cat > public/badges/ci-image.json <<JSON
          {"schemaVersion":1,"label":"CI image vuln","message":"${IMG_CRIT}C ${IMG_HIGH}H ${IMG_MED}M ${IMG_LOW}L","color":"${CI_COLOR}"}
          JSON

          cat > public/badges/ci-repo.json <<JSON
          {"schemaVersion":1,"label":"CI repo scan","message":"${FS_CRIT}C ${FS_HIGH}H ${FS_MED}M ${FS_LOW}L","color":"${FS_COLOR}"}
          JSON

      - name: Job summary
        run: |
          echo "## Trivy summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${IMAGE_NAME}:${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${IMG_CRIT:-?}C ${IMG_HIGH:-?}H ${IMG_MED:-?}M ${IMG_LOW:-?}L" >> $GITHUB_STEP_SUMMARY
          echo "- Repo : ${FS_CRIT:-?}C ${FS_HIGH:-?}H ${FS_MED:-?}M ${FS_LOW:-?}L" >> $GITHUB_STEP_SUMMARY

      # --- Publish the /public folder to GitHub Pages ---
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

    # Deploy must be a separate job (recommended by GitHub)
  deploy-pages:
    needs: build-and-scan
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

